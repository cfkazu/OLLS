use bevy::{window::WindowTheme, transform::commands};

use num_derive::FromPrimitive;    
use num_traits::FromPrimitive;
use crate::prelude::*;
use tiled::{Loader, TileLayer, FiniteTileLayer, FiniteTileLayerData};
#[derive(Copy, Clone, PartialEq,FromPrimitive)]
#[repr(usize)]
pub enum TileType {
    Glass1,
    Glass2,
    Glass3,
    Glass4,
    Glass5,
    Glass6,
    Glass7,
    Glass8,
    Glass9,
    Glass10,
    Glass11,
    GlassRock,
    Ground1,
    Ground2,
    Void1,
    Void2,
    Sand1,
    Sand2,
    Sand3,
    Sand4,
    SandGlass1,
    SandGlass2,
    SandGlass3,
    WhiteSand1,
    WhiteSand2,
    WhiteSand3,
    WhiteSand4,
    WhiteSand5,
    WhiteSand6,
    Road1,
    HayTate,
    HayYoko,
    Void3,

    DarkGrass1,
    DarkGrass2,
    DarkGrass3,
    DarkGrass4,
    Wasteland,
    DraySoil1,
    DraySoil2,
    DraySoil3,
    DraySoil4,
    DraySoil5,
    Concrete,
    Green1,
    Snow1,
    Snow2,
    Snow3,
    Snow4,
    Snow5,
    Snow6,
    Snow7,
    Snow8,
    SnowHayTate,
    SnowHayYoko,
    SnowLake,
    Snow9,
    Snow10,
    SnowTree1,
    SnowTree2,
    SnowBlueTile,
    SnowRock1,
    SnowRock2,
    SnowRock3,
    SnowRock4,
    SnowStair,

    Heat1,
    Heat2,
    Heat3,
    IronTable,
    WoodenFloor1,
    WoodenFloor2,
    WoodenFloor3,
    HayFloor1,
    HayFloor2,
    HayFloor3,
    BrownConcrete,
    Wara,
    HibiTile,
    BrueTile,
    Icetile,
    RoadTile,
    SnowFlower1,
    SnowFlower2,
    SnowFlower3,
    SnowGrass1,
    SnowGrass2,
    SnowGrass3,
    SnowGrass4,
    SnowRock5,
    SnowRock6,
    Snow11,
    Snow12,
    Snow13,
    FlowerGarden1,
    FlowerGarden2,
    FlowerGarden3,
    Void4,
    SnowPillar,

    BlownFloor,
    SilverFloor,
    BronzeFloor,
    BlueFloor,
    RockFloor1,
    RockFloor2,
    RockFloor3,
    RockFloor4,
    RockFloor5,
    RockFloor6,
    RockFloor7,
    RockFloor8,
    RockFloor9,
    RockFloor10,
    RockFloor11,
    Ido,
    Roof1,
    WhiteFloor,
    BronzeFloor2,
    BronzeFloor3,
    RockFloor12,
    RockFloor13,
    RockFloor14,
    RockFloor15,
    KasekiFloor1,
    KasekiFloor2,
    KasekiFloor3,
    KasekiFloor4,
    KasekiFloor5,
    KasekiFloor6,
    KasekiFloor7,
    KasekiFloor8,
    KasekiFloor9,

    Tilex0,
Tilex1,
Tilex2,
Tilex3,
Tilex4,
Tilex5,
Tilex6,
Tilex7,
Tilex8,
Tilex9,
Tilex10,
Tilex11,
Tilex12,
Tilex13,
Tilex14,
Tilex15,
Tilex16,
Tilex17,
Tilex18,
Tilex19,
Tilex20,
Tilex21,
Tilex22,
Tilex23,
Tilex24,
Tilex25,
Tilex26,
Tilex27,
Tilex28,
Tilex29,
Tilex30,
Tilex31,
Tilex32,
Tilex33,
Tilex34,
Tilex35,
Tilex36,
Tilex37,
Tilex38,
Tilex39,
Tilex40,
Tilex41,
Tilex42,
Tilex43,
Tilex44,
Tilex45,
Tilex46,
Tilex47,
Tilex48,
Tilex49,
Tilex50,
Tilex51,
Tilex52,
Tilex53,
Tilex54,
Tilex55,
Tilex56,
Tilex57,
Tilex58,
Tilex59,
Tilex60,
Tilex61,
Tilex62,
Tilex63,
Tilex64,
Tilex65,
Tilex66,
Tilex67,
Tilex68,
Tilex69,
Tilex70,
Tilex71,
Tilex72,
Tilex73,
Tilex74,
Tilex75,
Tilex76,
Tilex77,
Tilex78,
Tilex79,
Tilex80,
Tilex81,
Tilex82,
Tilex83,
Tilex84,
Tilex85,
Tilex86,
Tilex87,
Tilex88,
Tilex89,
Tilex90,
Tilex91,
Tilex92,
Tilex93,
Tilex94,
Tilex95,
Tilex96,
Tilex97,
Tilex98,
Tilex99,
Tilex100,
Tilex101,
Tilex102,
Tilex103,
Tilex104,
Tilex105,
Tilex106,
Tilex107,
Tilex108,
Tilex109,
Tilex110,
Tilex111,
Tilex112,
Tilex113,
Tilex114,
Tilex115,
Tilex116,
Tilex117,
Tilex118,
Tilex119,
Tilex120,
Tilex121,
Tilex122,
Tilex123,
Tilex124,
Tilex125,
Tilex126,
Tilex127,
Tilex128,
Tilex129,
Tilex130,
Tilex131,
Tilex132,
Tilex133,
Tilex134,
Tilex135,
Tilex136,
Tilex137,
Tilex138,
Tilex139,
Tilex140,
Tilex141,
Tilex142,
Tilex143,
Tilex144,
Tilex145,
Tilex146,
Tilex147,
Tilex148,
Tilex149,
Tilex150,
Tilex151,
Tilex152,
Tilex153,
Tilex154,
Tilex155,
Tilex156,
Tilex157,
Tilex158,
Tilex159,
Tilex160,
Tilex161,
Tilex162,
Tilex163,
Tilex164,
Tilex165,
Tilex166,
Tilex167,
Tilex168,
Tilex169,
Tilex170,
Tilex171,
Tilex172,
Tilex173,
Tilex174,
Tilex175,
Tilex176,
Tilex177,
Tilex178,
Tilex179,
Tilex180,
Tilex181,
Tilex182,
Tilex183,
Tilex184,
Tilex185,
Tilex186,
Tilex187,
Tilex188,
Tilex189,
Tilex190,
Tilex191,
Tilex192,
Tilex193,
Tilex194,
Tilex195,
Tilex196,
Tilex197,
Tilex198,
Tilex199,
Tilex200,
Tilex201,
Tilex202,
Tilex203,
Tilex204,
Tilex205,
Tilex206,
Tilex207,
Tilex208,
Tilex209,
Tilex210,
Tilex211,
Tilex212,
Tilex213,
Tilex214,
Tilex215,
Tilex216,
Tilex217,
Tilex218,
Tilex219,
Tilex220,
Tilex221,
Tilex222,
Tilex223,
Tilex224,
Tilex225,
Tilex226,
Tilex227,
Tilex228,
Tilex229,
Tilex230,
Tilex231,
Tilex232,
Tilex233,
Tilex234,
Tilex235,
Tilex236,
Tilex237,
Tilex238,
Tilex239,
Tilex240,
Tilex241,
Tilex242,
Tilex243,
Tilex244,
Tilex245,
Tilex246,
Tilex247,
Tilex248,
Tilex249,
Tilex250,
Tilex251,
Tilex252,
Tilex253,
Tilex254,
Tilex255,
Tilex256,
Tilex257,
Tilex258,
Tilex259,
Tilex260,
Tilex261,
Tilex262,
Tilex263,
Tilex264,
Tilex265,
Tilex266,
Tilex267,
Tilex268,
Tilex269,
Tilex270,
Tilex271,
Tilex272,
Tilex273,
Tilex274,
Tilex275,
Tilex276,
Tilex277,
Tilex278,
Tilex279,
Tilex280,
Tilex281,
Tilex282,
Tilex283,
Tilex284,
Tilex285,
Tilex286,
Tilex287,
Tilex288,
Tilex289,
Tilex290,
Tilex291,
Tilex292,
Tilex293,
Tilex294,
Tilex295,
Tilex296,
Tilex297,
Tilex298,
Tilex299,
Tilex300,
Tilex301,
Tilex302,
Tilex303,
Tilex304,
Tilex305,
Tilex306,
Tilex307,
Tilex308,
Tilex309,
Tilex310,
Tilex311,
Tilex312,
Tilex313,
Tilex314,
Tilex315,
Tilex316,
Tilex317,
Tilex318,
Tilex319,
Tilex320,
Tilex321,
Tilex322,
Tilex323,
Tilex324,
Tilex325,
Tilex326,
Tilex327,
Tilex328,
Tilex329,
Tilex330,
Tilex331,
Tilex332,
Tilex333,
Tilex334,
Tilex335,
Tilex336,
Tilex337,
Tilex338,
Tilex339,
Tilex340,
Tilex341,
Tilex342,
Tilex343,
Tilex344,
Tilex345,
Tilex346,
Tilex347,
Tilex348,
Tilex349,
Tilex350,
Tilex351,
Tilex352,
Tilex353,
Tilex354,
Tilex355,
Tilex356,
Tilex357,
Tilex358,
Tilex359,
Tilex360,
Tilex361,
Tilex362,
Tilex363,
Tilex364,
Tilex365,
Tilex366,
Tilex367,
Tilex368,
Tilex369,
Tilex370,
Tilex371,
Tilex372,
Tilex373,
Tilex374,
Tilex375,
Tilex376,
Tilex377,
Tilex378,
Tilex379,
Tilex380,
Tilex381,
Tilex382,
Tilex383,
Tilex384,
Tilex385,
Tilex386,
Tilex387,
Tilex388,
Tilex389,
Tilex390,
Tilex391,
Tilex392,
Tilex393,
Tilex394,
Tilex395,
Tilex396,
Tilex397,
Tilex398,
Tilex399,
Tilex400,
Tilex401,
Tilex402,
Tilex403,
Tilex404,
Tilex405,
Tilex406,
Tilex407,
Tilex408,
Tilex409,
Tilex410,
Tilex411,
Tilex412,
Tilex413,
Tilex414,
Tilex415,
Tilex416,
Tilex417,
Tilex418,
Tilex419,
Tilex420,
Tilex421,
Tilex422,
Tilex423,
Tilex424,
Tilex425,
Tilex426,
Tilex427,
Tilex428,
Tilex429,
Tilex430,
Tilex431,
Tilex432,
Tilex433,
Tilex434,
Tilex435,
Tilex436,
Tilex437,
Tilex438,
Tilex439,
Tilex440,
Tilex441,
Tilex442,
Tilex443,
Tilex444,
Tilex445,
Tilex446,
Tilex447,
Tilex448,
Tilex449,
Tilex450,
Tilex451,
Tilex452,
Tilex453,
Tilex454,
Tilex455,
Tilex456,
Tilex457,
Tilex458,
Tilex459,
Tilex460,
Tilex461,
Tilex462,
Tilex463,
Tilex464,
Tilex465,
Tilex466,
Tilex467,
Tilex468,
Tilex469,
Tilex470,
Tilex471,
Tilex472,
Tilex473,
Tilex474,
Tilex475,
Tilex476,
Tilex477,
Tilex478,
Tilex479,
Tilex480,
Tilex481,
Tilex482,
Tilex483,
Tilex484,
Tilex485,
Tilex486,
Tilex487,
Tilex488,
Tilex489,
Tilex490,
Tilex491,
Tilex492,
Tilex493,
Tilex494,
Tilex495,
Tilex496,
Tilex497,
Tilex498,
Tilex499,
Tilex500,
Tilex501,
Tilex502,
Tilex503,
Tilex504,
Tilex505,
Tilex506,
Tilex507,
Tilex508,
Tilex509,
Tilex510,
Tilex511,
Tilex512,
Tilex513,
Tilex514,
Tilex515,
Tilex516,
Tilex517,
Tilex518,
Tilex519,
Tilex520,
Tilex521,
Tilex522,
Tilex523,
Tilex524,
Tilex525,
Tilex526,
Tilex527,
Tilex528,
Tilex529,
Tilex530,
Tilex531,
Tilex532,
Tilex533,
Tilex534,
Tilex535,
Tilex536,
Tilex537,
Tilex538,
Tilex539,
Tilex540,
Tilex541,
Tilex542,
Tilex543,
Tilex544,
Tilex545,
Tilex546,
Tilex547,
Tilex548,
Tilex549,
Tilex550,
Tilex551,
Tilex552,
Tilex553,
Tilex554,
Tilex555,
Tilex556,
Tilex557,
Tilex558,
Tilex559,
Tilex560,
Tilex561,
Tilex562,
Tilex563,
Tilex564,
Tilex565,
Tilex566,
Tilex567,
Tilex568,
Tilex569,
Tilex570,
Tilex571,
Tilex572,
Tilex573,
Tilex574,
Tilex575,
Tilex576,
Tilex577,
Tilex578,
Tilex579,
Tilex580,
Tilex581,
Tilex582,
Tilex583,
Tilex584,
Tilex585,
Tilex586,
Tilex587,
Tilex588,
Tilex589,
Tilex590,
Tilex591,
Tilex592,
Tilex593,
Tilex594,
Tilex595,
Tilex596,
Tilex597,
Tilex598,
Tilex599,
Tilex600,
Tilex601,
Tilex602,
Tilex603,
Tilex604,
Tilex605,
Tilex606,
Tilex607,
Tilex608,
Tilex609,
Tilex610,
Tilex611,
Tilex612,
Tilex613,
Tilex614,
Tilex615,
Tilex616,
Tilex617,
Tilex618,
Tilex619,
Tilex620,
Tilex621,
Tilex622,
Tilex623,
Tilex624,
Tilex625,
Tilex626,
Tilex627,
Tilex628,
Tilex629,
Tilex630,
Tilex631,
Tilex632,
Tilex633,
Tilex634,
Tilex635,
Tilex636,
Tilex637,
Tilex638,
Tilex639,
Tilex640,
Tilex641,
Tilex642,
Tilex643,
Tilex644,
Tilex645,
Tilex646,
Tilex647,
Tilex648,
Tilex649,
Tilex650,
Tilex651,
Tilex652,
Tilex653,
Tilex654,
Tilex655,
Tilex656,
Tilex657,
Tilex658,
Tilex659,
Tilex660,
Tilex661,
Tilex662,
Tilex663,
Tilex664,
Tilex665,
Tilex666,
Tilex667,
Tilex668,
Tilex669,
Tilex670,
Tilex671,
Tilex672,
Tilex673,
Tilex674,
Tilex675,
Tilex676,
Tilex677,
Tilex678,
Tilex679,
Tilex680,
Tilex681,
Tilex682,
Tilex683,
Tilex684,
Tilex685,
Tilex686,
Tilex687,
Tilex688,
Tilex689,
Tilex690,
Tilex691,
Tilex692,
Tilex693,
Tilex694,
Tilex695,
Tilex696,
Tilex697,
Tilex698,
Tilex699,



}
#[derive(Resource)]
pub struct Map{
    pub width:i32,
    pub height:i32,
    pub tiles:Vec<TileType>,
    pub occupation: Vec<Option<Entity>>,
    pub player_start:Position,
    pub mob_starts:Vec<(Position,Mob)>,
   // pub mob_positions:Vec<Position>,
    pub file_name:String,
}
impl Map{
    pub fn new(width:i32,height:i32) -> Self{
        Self{
            width,
            height,
            tiles:vec![TileType::Glass1;(width*height) as usize],
            occupation:vec![None;(width*height) as usize],
            player_start:Position::new(1,2),
            mob_starts:Vec::new(),
           // mob_positions:Vec::new(),
            file_name:String::new(),
        }
    }

    pub fn in_bounds<T: Into<Position>> (&self, position: T) -> bool {
        let position = position.into();
        position.x >= 0 && position.x < self.width as i32
            && position.y >= 0 && position.y < self.height as i32
    }
    pub fn map_idx(&self,x: i32, y: i32) -> usize {
        ((y*self.width) + x) as usize
    }
    pub fn is_tile_occupied<T: Into<Position>> (&self, position: T) -> bool {
        let position = position.into();
        self.in_bounds(position)
            && self.occupation[self.map_idx(position.x, position.y)] == None
    }
    pub fn try_idx(&self,position:Position)->Option<usize>{
        if self.in_bounds(position){
            Some(self.map_idx(position.x,position.y))
        }else{
            None
        }
    }
    pub fn testmap() -> Self{
        let my_tile:Vec<TileType> =  vec![TileType::GlassRock,TileType::GlassRock,TileType::GlassRock,TileType::GlassRock,TileType::GlassRock,
                                          TileType::GlassRock,TileType::Glass1,TileType::Glass1,TileType::Glass1,TileType::GlassRock,
                                          TileType::GlassRock,TileType::Glass1,TileType::Glass1,TileType::Glass1,TileType::GlassRock,
                                          TileType::GlassRock,TileType::Glass1,TileType::Glass1,TileType::Glass1,TileType::GlassRock,
                                          TileType::GlassRock,TileType::GlassRock,TileType::GlassRock,TileType::GlassRock,TileType::GlassRock];
        Self{
            width:5,
            height:5,
            tiles:my_tile,
            occupation:vec![None;25],
            player_start:Position::new(2,1),
            mob_starts:vec![(Position::new(2,3),Mob{mob_type:MobType::Neutral,index:5}),
                            (Position::new(3,3),Mob{mob_type:MobType::Neutral,index:6}),
                            (Position::new(2,2),Mob{mob_type:MobType::Neutral,index:7}),
                            (Position::new(3,2),Mob{mob_type:MobType::Neutral,index:8})
                            ],
            //mob_positions:vec![Position::new(2,3),Position::new(3,3)],
            file_name:String::from("test"),
        }
    }
    pub fn can_enter_tile<T:Into<Position>>(&self,position: T)->bool{
        let position = position.into();
        self.in_bounds(position) 
        //&& self.tiles[self.map_idx(position.x, position.y)] == TileType::Glass1 
        && self.tiles[self.map_idx(position.x, position.y)] != TileType::Heat3
        && self.occupation[self.map_idx(position.x, position.y)] == None
    }

    pub fn entity_occupy_tile(&mut self,entity:Entity,position:Position){
        if let Some(idx) = self.try_idx(position){
            self.occupation[idx] = Some(entity);
        }
    }
    pub fn entities_occupy_tiles(&mut self,entities:Vec<Entity>,positions:Vec<Position>){
        for (entity,position) in entities.iter().zip(positions.iter()){
            self.entity_occupy_tile(*entity,*position);
        }
    }
    pub fn move_entity_occupation(&mut self, entity: Entity, old_p: Position, new_p: Position) {
        let old_idx = self.map_idx(old_p.x, old_p.y);
        let new_idx = self.map_idx(new_p.x, new_p.y);
        self.occupation[old_idx] = None;
        self.occupation[new_idx] = Some(entity);
    } 
    pub fn free_occupy_tile(&mut self,position:Position){
        if let Some(idx) = self.try_idx(position){
            self.occupation[idx] = None;
        }
    }
    pub fn load(filename:&str)->Self{
        let mut loader = Loader::new();
        let map = loader.load_tmx_map(format!("assets/map/{}.tmx",filename));
        //println!("map:{:?}",map);
       

        if let Ok(map) = map{
            let mut my_tile:Vec<TileType> = Vec::new();
            let layer = map.get_layer(0).unwrap().as_tile_layer().unwrap();
            if let tiled::TileLayer::Finite(tiles) = layer{
                for y in (0..layer.height().unwrap()).rev(){
                    for x in (0..layer.width().unwrap()){
                        if let Some(t) = tiles.get_tile(x as i32,y as i32) {
                            my_tile.push(FromPrimitive::from_u32(t.id()).unwrap());
                        }
                    }
                }
            }

            Self{
                width:map.width as i32,
                height:map.height as i32,
                tiles:my_tile,
                occupation:vec![None;(map.width*map.height) as usize],
                player_start:Position::new(15,15),
                mob_starts:Vec::new(),
                //mob_positions:Vec::new(),
                file_name:filename.to_string(),

            }
        }else{
            panic!("Map not found");
        }
        
    }   

}
pub fn spawn_map_tiles(
    map: Res<Map>,
    mut commands: Commands,
    atlas: Res<MapAsset>,
){
    for y in 0..map.height{
        for x in 0..map.width{
            let tile = map.tiles[map.map_idx(x,y)];
            let position = Position::new(x,y);
            let mut sprite = TextureAtlasSprite::new(tile as usize);
            sprite.custom_size = Some(Vec2::new(TILE_SIZE, TILE_SIZE));
            //sprite.color = Color::OLIVE;
            commands.spawn((
                SpriteSheetBundle{
                    sprite: sprite,
                    texture_atlas: atlas.atlas.clone(),
                    transform: position.into(),
                    ..Default::default()
                },
            ));
        }
    }
}